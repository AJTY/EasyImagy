% types = [
%   'Numeric',
%   'SignedNumeric',
%   'BinaryInteger',
%   'FixedWidthInteger',
%   'FloatingPoint',
%   'Bool',
% ]
% type_to_operators = {
%   'Numeric': ['+', '-', '*', '+=', '-=', '*='],
%   'SignedNumeric': [],
%   'BinaryInteger': ['/', '%', '&', '|', '^', '<<', '>>', '/=', '%=', '&=', '|=', '^=', '<<=', '>>='],
%   'FixedWidthInteger': ['&+', '&-', '&*', '&<<', '&>>', '&<<=', '&>>='],
%   'FloatingPoint': ['/', '/='],
%   'Bool': ['&&', '||']
% }
% type_to_prefix_operators = {
%   'Numeric': ['+'],
%   'SignedNumeric': ['-'],
%   'BinaryInteger': [],
%   'FixedWidthInteger': [],
%   'FloatingPoint': [],
%   'Bool': ['!'],
% }
% for i, type in enumerate(types):
%   if i > 0:

%   end
extension RGBA where Channel ${'==' if type == 'Bool' else ':'} ${type} {
%   first = True
%   for operator in type_to_operators[type]:
%     if first:
%       first = False
%     else:

%     end
%     if operator.endswith('='):
    public static func ${operator}(lhs: inout RGBA<Channel>, rhs: RGBA<Channel>) {
        lhs.red ${operator} rhs.red
        lhs.green ${operator} rhs.green
        lhs.blue ${operator} rhs.blue
        lhs.alpha ${operator} rhs.alpha
%     else:
    public static func ${operator}(lhs: RGBA<Channel>, rhs: RGBA<Channel>) -> RGBA<Channel> {
        return RGBA(red: lhs.red ${operator} rhs.red, green: lhs.green ${operator} rhs.green, blue: lhs.blue ${operator} rhs.blue, alpha: lhs.alpha ${operator} rhs.alpha)
%     end
    }
%   end
%
%   for operator in type_to_prefix_operators[type]:
%     if first:
%       first = False
%     else:

%     end
    prefix public static func ${operator}(a: RGBA<Channel>) -> RGBA<Channel> {
        return RGBA(red: ${operator}a.red, green: ${operator}a.green, blue: ${operator}a.blue, alpha: ${operator}a.alpha)
    }
%   end
}
% end
