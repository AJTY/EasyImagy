% types = ['UInt8', 'UInt16', 'UInt32', 'Float', 'Double', 'Float80', 'Bool']
#if os(OSX)
import AppKit
% for is_rgba in [True, False]:
%   for type in types:
%     pixel_type = f'RGBA<{type}>' if is_rgba else type
    
extension Image where Pixel == ${pixel_type} {
    public init(nsImage: NSImage) {
        if let cgImage: CGImage = nsImage.cgImage(forProposedRect: nil, context: nil, hints: nil) {
            self.init(cgImage: cgImage)
        } else {
            precondition(nsImage.size == .zero, "The `size` of the given `NSImage` instance (\(nsImage)) must be equal to `.zero` when the `cgImage` of the instance is `nil`.")
            self.init(width: 0, height: 0, pixels: [])
        }
    }
    
    private init?(nsImageOrNil: NSImage?) {
        guard let nsImage: NSImage = nsImageOrNil else { return nil }
        self.init(nsImage: nsImage)
    }
    
    public init?(named name: NSImage.Name) {
        self.init(nsImageOrNil: NSImage(named: name))
    }
    
    public init?(contentsOfFile path: String) {
        self.init(nsImageOrNil: NSImage(contentsOfFile: path))
    }
    
    public init?(data: Data) {
        self.init(nsImageOrNil: NSImage(data: data))
    }
    
    public var nsImage: NSImage {
        return NSImage(cgImage: cgImage, size: .zero)
    }
}
%   end
% end
#endif
