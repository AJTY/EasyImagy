% basic_channel_types = [
%   'Int',
%   'Int8',
%   'Int16',
%   'Int32',
%   'Int64',
%   'UInt',
%   'UInt8',
%   'UInt16',
%   'UInt32',
%   'UInt64',
%   'Float',
%   'Double',
%   'Bool',
% ]
% basic_types = [f'RGBA<{t}>' for t in basic_channel_types] + basic_channel_types
extension Image {
% for type in basic_types:
%   for target_type in basic_types:
    @_specialize(exported: true, where Pixel == ${type}, T == ${target_type})
%   end
% end
    public func map<T>(_ transform: (Pixel) -> T) -> Image<T> {
        return Image<T>(width: width, height: height, pixels: pixels.map(transform))
    }
    
% for type in basic_types:
%   for target_type in basic_types:
    @_specialize(exported: true, where Pixel == ${type}, T == ${target_type})
%   end
% end
    public func map<T>(_ transform: (_ x: Int, _ y: Int, _ pixel: Pixel) -> T) -> Image<T> {
        var pixels: [T] = []
        pixels.reserveCapacity(count)
        var generator = makeIterator()
        for y in 0..<height {
            for x in 0..<width {
                pixels.append(transform(x, y, generator.next()!))
            }
        }
        return Image<T>(width: width, height: height, pixels: pixels)
    }
    
% for type in basic_types:
    @_specialize(exported: true, where Pixel == ${type})
% end
    public mutating func update(_ transform: (Pixel) -> Pixel) {
        for i in 0..<count {
            pixels[i] = transform(pixels[i])
        }
    }
}
