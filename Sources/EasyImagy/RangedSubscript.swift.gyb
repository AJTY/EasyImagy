% image_types = ['Image', 'ImageSlice']
% infinite_range_types = ['PartialRangeFrom', 'PartialRangeThrough', 'PartialRangeUpTo', 'CountablePartialRangeFrom', 'UnboundedRange']
% infinite_range_type_set = set(infinite_range_types)
% range_types = ['CountableRange', 'CountableClosedRange', 'Range', 'ClosedRange'] + infinite_range_types
%
% for i, image_type in enumerate(image_types):
%     if i > 0:

%     end
extension ${image_type} {
    % for j, range_type_1 in enumerate(range_types):
    %     type_raprameter_1 = '' if range_type_1 == 'UnboundedRange' else '<Int>'
    %     for k, range_type_2 in enumerate(range_types):
    %         if j > 0 or k > 0:

    %         end
    %         type_raprameter_2 = '' if range_type_2 == 'UnboundedRange' else '<Int>'
    public subscript(xRange: ${range_type_1}${type_raprameter_1}, yRange: ${range_type_2}${type_raprameter_2}) -> ImageSlice<Pixel> {
        % if range_type_1 == 'CountableRange' and range_type_2 == 'CountableRange':
        %     if image_type == 'Image':
        return ImageSlice(image: self, xRange: xRange, yRange: yRange)
        %     elif image_type == 'ImageSlice':
        precondition(self.xRange.isSuperset(of: xRange), "`xRange` is out of bounds: \(xRange)")
        precondition(self.xRange.isSuperset(of: yRange), "`yRange` is out of bounds: \(yRange)")
        return image[xRange, yRange]
        %     else:
        %         raise(Exception('Never reaches here.'))
        %     end
        % else:
        return self[countableRange(from: xRange, relativeTo: self.xRange), countableRange(from: yRange, relativeTo: self.yRange)]
        % end
    }
    %     end
    % end
}
% end
