% image_types = ['Image', 'ImageSlice']
% range_types = [
%   'CountableRange',
%   'CountableClosedRange' 
%   'Range',
%   'ClosedRange',
%   'PartialRangeFrom',
%   'PartialRangeThrough',
%   'PartialRangeUpTo',
%   'CountablePartialRangeFrom',
%   'UnboundedRange'
% ]
% range_types = [t if t == 'UnboundedRange' else f'{t}<Int>' for t in range_types]
%
% for i, image_type in enumerate(image_types):
%   if i > 0:

%   end
extension ${image_type} {
    public subscript(xRange: CountableRange<Int>, yRange: CountableRange<Int>) -> ImageSlice<Pixel> {
%   if image_type == 'Image':
        return ImageSlice(image: self, xRange: xRange, yRange: yRange)
%   elif image_type == 'ImageSlice':
        precondition(self.xRange.isSuperset(of: xRange), "`xRange` is out of bounds: \(xRange)")
        precondition(self.xRange.isSuperset(of: yRange), "`yRange` is out of bounds: \(yRange)")
        return image[xRange, yRange]
%   else:
%     raise(Exception('Never reaches here.'))
%   end
    }

%   for range_type_1 in range_types:
%     for range_type_2 in range_types:
%       if range_type_1 != 'CountableRange' or range_type_2 != 'CountableRange':
%#    @_specialize(exported: true, where R1 == ${range_type_1}, R2 == ${range_type_2})
%       end
%     end
%   end
    public subscript<R1: RangeExpression, R2: RangeExpression>(xRange: R1, yRange: R2) -> ImageSlice<Pixel> where R1.Bound == Int, R2.Bound == Int {
        return self[countableRange(from: xRange, relativeTo: self.xRange), countableRange(from: yRange, relativeTo: self.yRange)]
    }

%   for range_type_1 in range_types:
%#    @_specialize(exported: true, where R1 == ${range_type_1})
%   end
    public subscript<R1: RangeExpression>(xRange: R1, yRange: UnboundedRange) -> ImageSlice<Pixel> where R1.Bound == Int {
        return self[countableRange(from: xRange, relativeTo: self.xRange), self.yRange]
    }

%   for range_type_2 in range_types:
%#    @_specialize(exported: true, where R1 == ${range_type_2})
%   end
    public subscript<R2: RangeExpression>(xRange: UnboundedRange, yRange: R2) -> ImageSlice<Pixel> where R2.Bound == Int {
        return self[self.xRange, countableRange(from: yRange, relativeTo: self.yRange)]
    }

    public subscript(xRange: UnboundedRange, yRange: UnboundedRange) -> ImageSlice<Pixel> {
        return self[self.xRange, self.yRange]
    }
}
% end
