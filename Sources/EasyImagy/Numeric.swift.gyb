import Foundation

internal func *<T : Numeric>(lhs: RGBA<T>, rhs: T) -> RGBA<T> {
    return RGBA<T>(red: lhs.red * rhs, green: lhs.green * rhs, blue: lhs.blue * rhs, alpha: lhs.alpha * rhs)
}

internal func /<T : BinaryInteger>(lhs: RGBA<T>, rhs: T) -> RGBA<T> {
    return RGBA<T>(red: lhs.red / rhs, green: lhs.green / rhs, blue: lhs.blue / rhs, alpha: lhs.alpha / rhs)
}

internal func /<T : FloatingPoint>(lhs: RGBA<T>, rhs: T) -> RGBA<T> {
    return RGBA<T>(red: lhs.red / rhs, green: lhs.green / rhs, blue: lhs.blue / rhs, alpha: lhs.alpha / rhs)
}
%
% types = ['UInt8', 'UInt16', 'UInt32', 'Int', 'Float', 'Double']
% type_to_summables = {
%   'UInt8' : ['Int', 'Float', 'Double'],
%   'UInt16': ['Int', 'Float', 'Double'],
%   'UInt32': ['Int64', 'Float', 'Double'],
%   'Int'   : ['Int', 'Float', 'Double'],
%   'Float' : ['Float', 'Float', 'Double'],
%   'Double': ['Double', 'Double', 'Double'],
% }
% summable_sybmols = ['I', 'F', 'D']
% summable_weights = ['Int', 'Float', 'Double']
%
% for type in types:

extension RGBA where Channel == ${type} {
%   summables = type_to_summables[type]
%
%   for i, (summable_symbol, summable) in enumerate(zip(summable_sybmols, summables)):
%     if i > 0:

%     end
    internal init(summable${summable_symbol}: RGBA<${summable}>) {
%     if summable == type:
        self = summable${summable_symbol}
%     else:
        self = RGBA<${type}>(summable${summable_symbol})
%     end
    }
%   end
%
%   for summable_symbol, summable in zip(summable_sybmols, summables):
    
    internal var summable${summable_symbol}: RGBA<${summable}> {
%     if summable == type:
        return self
%     else:
        return RGBA<${summable}>(red: ${summable}(red), green: ${summable}(green), blue: ${summable}(blue), alpha: ${summable}(alpha))
%     end
    }
%   end

    internal static var selfZero: RGBA<${type}> {
        return RGBA<${type}>(red: 0, green: 0, blue: 0, alpha: 0)
    }

%   for summable_symbol, summable in zip(summable_sybmols, summables):
    
    internal static var summable${summable_symbol}Zero: RGBA<${summable}> {
        return RGBA<${summable}>(red: 0, green: 0, blue: 0, alpha: 0)
    }
%   end
%
%   for summable_symbol, summable_weight, summable in zip(summable_sybmols, summable_weights, summables):
    
    internal static func product${summable_symbol}(_ lhs: RGBA<${summable}>, _ rhs: ${summable_weight}) -> RGBA<${summable}> {
%     if summable_weight == summable:
        return lhs * rhs
%     else:
        return lhs * ${summable}(rhs)
%     end
    }
%   end
%   for summable_symbol, summable_weight, summable in zip(summable_sybmols, summable_weights, summables):

    internal static func quotient${summable_symbol}(_ lhs: RGBA<${summable}>, _ rhs: ${summable_weight}) -> RGBA<${summable}> {
%     if summable_weight == summable:
        return lhs / rhs
%     else:
        return lhs / ${summable}(rhs)
%     end
    }
%   end
}
% end
%
% for type in types:

extension ${type} {
%   summables = type_to_summables[type]
%
%   for i, (summable_symbol, summable) in enumerate(zip(summable_sybmols, summables)):
%     if i > 0:

%     end
    internal init(summable${summable_symbol}: ${summable}) {
%     if summable == type:
        self = summable${summable_symbol}
%     else:
        self = ${type}(summable${summable_symbol})
%     end
    }
%   end
%
%   for summable_symbol, summable in zip(summable_sybmols, summables):
    
    internal var summable${summable_symbol}: ${summable} {
%     if summable == type:
        return self
%     else:
        return ${summable}(self)
%     end
    }
%   end

    internal static var selfZero: ${type} {
        return 0
    }

%   for summable_symbol, summable in zip(summable_sybmols, summables):
    
    internal static var summable${summable_symbol}Zero: ${summable} {
        return 0
        
    }
%   end
%
%   for summable_symbol, summable_weight, summable in zip(summable_sybmols, summable_weights, summables):
    
    internal static func product${summable_symbol}(_ lhs: ${summable}, _ rhs: ${summable_weight}) -> ${summable} {
%     if summable_weight == summable:
        return lhs * rhs
%     else:
        return lhs * ${summable}(rhs)
%     end
    }
%   end
%
%   for summable_symbol, summable_weight, summable in zip(summable_sybmols, summable_weights, summables):
    
    internal static func quotient${summable_symbol}(_ lhs: ${summable}, _ rhs: ${summable_weight}) -> ${summable} {
%     if summable_weight == summable:
        return lhs / rhs
%     else:
        return lhs / ${summable}(rhs)
%     end
    }
%   end
}
% end
