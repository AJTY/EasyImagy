% channel_types = [
%   'UInt8',
%   'UInt16',
%   'UInt32',
%   'Int',
%   'Float',
%   'Double',
%   'Float80',
% ]
% types = [f'RGBA<{t}>' for t in channel_types] + channel_types
%
% for i, type in enumerate(types):
%   if i > 0:

%   end
extension ImageProtocol where Element == ${type} { // Convolution
    @_specialize(exported: true, where Self == Image<${type}>, Kernel == Image<Int>)
    @_specialize(exported: true, where Self == Image<${type}>, Kernel == ImageSlice<Int>)
    @_specialize(exported: true, where Self == ImageSlice<${type}>, Kernel == Image<Int>)
    @_specialize(exported: true, where Self == ImageSlice<${type}>, Kernel == ImageSlice<Int>)
    public func convoluted<Kernel : ImageProtocol>(with kernel: Kernel, extrapolatedBy extrapolationMethod: ExtrapolationMethod<${type}> = .edging) -> Image<${type}> where Kernel.Pixel == Int {
        return self.convoluted(with: kernel, extrapolatedBy: extrapolationMethod, toSummable: { $0.summableI }, product: Pixel.productI, zero: Pixel.summableIZero, sum: +, toOriginal: Pixel.init(summableI:))
    }

    @_specialize(exported: true, where Self == Image<${type}>, Kernel == Image<Float>)
    @_specialize(exported: true, where Self == Image<${type}>, Kernel == ImageSlice<Float>)
    @_specialize(exported: true, where Self == ImageSlice<${type}>, Kernel == Image<Float>)
    @_specialize(exported: true, where Self == ImageSlice<${type}>, Kernel == ImageSlice<Float>)
    public func convoluted<Kernel : ImageProtocol>(with kernel: Kernel, extrapolatedBy extrapolationMethod: ExtrapolationMethod<${type}> = .edging) -> Image<${type}> where Kernel.Pixel == Float {
        return self.convoluted(with: kernel, extrapolatedBy: extrapolationMethod, toSummable: { $0.summableF }, product: Pixel.productF, zero: Pixel.summableFZero, sum: +, toOriginal: Pixel.init(summableF:))
    }

    @_specialize(exported: true, where Self == Image<${type}>, Kernel == Image<Double>)
    @_specialize(exported: true, where Self == Image<${type}>, Kernel == ImageSlice<Double>)
    @_specialize(exported: true, where Self == ImageSlice<${type}>, Kernel == Image<Double>)
    @_specialize(exported: true, where Self == ImageSlice<${type}>, Kernel == ImageSlice<Double>)
    public func convoluted<Kernel : ImageProtocol>(with kernel: Kernel, extrapolatedBy extrapolationMethod: ExtrapolationMethod<${type}> = .edging) -> Image<${type}> where Kernel.Pixel == Double {
        return self.convoluted(with: kernel, extrapolatedBy: extrapolationMethod, toSummable: { $0.summableD }, product: Pixel.productD, zero: Pixel.summableDZero, sum: +, toOriginal: Pixel.init(summableD:))
    }
}
% end
%
% for i, type in enumerate(types):

extension ImageProtocol where Element == ${type} { // Interpolation
    // Not implemented by default parameter values to improve performance especially when this `subscript` is called repeatedly
    public subscript(x: Double, y: Double) -> ${type} {
        return interpolatedPixelByBilinear(x: x, y: y, toSummable: { $0.summableD }, product: Pixel.productD, sum: +, toOriginal: Pixel.init(summableD:)) { self[$0, $1] }
    }

    public subscript(x: Double, y: Double, interpolatedBy interpolationMethod: InterpolationMethod) -> ${type} {
        switch interpolationMethod {
            case .nearestNeighbor:
                return interpolatedPixelByNearestNeighbor(x: x, y: y) { self[$0, $1] }
            case .bilinear:
                return interpolatedPixelByBilinear(x: x, y: y, toSummable: { $0.summableD }, product: Pixel.productD, sum: +, toOriginal: Pixel.init(summableD:)) { self[$0, $1] }
        }
    }
    
    public subscript(x: Double, y: Double, interpolatedBy interpolationMethod: InterpolationMethod, extrapolatedBy extrapolationMethod: ExtrapolationMethod<Pixel>) -> ${type} {
        switch interpolationMethod {
            case .nearestNeighbor:
                return interpolatedPixelByNearestNeighbor(x: x, y: y) { self[$0, $1, extrapolatedBy: extrapolationMethod] }
            case .bilinear:
                return interpolatedPixelByBilinear(x: x, y: y, toSummable: { $0.summableD }, product: Pixel.productD, sum: +, toOriginal: Pixel.init(summableD:)) { self[$0, $1, extrapolatedBy: extrapolationMethod] }
        }
    }
}
% end
