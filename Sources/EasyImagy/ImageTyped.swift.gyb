% channel_types = [
%   'UInt8',
%   'UInt16',
%   'UInt32',
%   'Int',
%   'Float',
%   'Double',
% ]
% types = [f'RGBA<{t}>' for t in channel_types] + channel_types
%
% for i, type in enumerate(types):
%   if i > 0:

%   end
extension Image where Pixel == ${type} { // Convolution
    public func convoluted(by kernel: Image<Int>) -> Image<${type}> {
        return self._convoluted(by: kernel, toSummable: { $0.summableI }, product: Pixel.productI, zero: Pixel.summableIZero, sum: +, toOriginal: Pixel.init(summableI:))
    }

    public func convoluted(by kernel: Image<Float>) -> Image<${type}> {
        return self._convoluted(by: kernel, toSummable: { $0.summableF }, product: Pixel.productF, zero: Pixel.summableFZero, sum: +, toOriginal: Pixel.init(summableF:))
    }

    public func convoluted(by kernel: Image<Double>) -> Image<${type}> {
        return self._convoluted(by: kernel, toSummable: { $0.summableD }, product: Pixel.productD, zero: Pixel.summableDZero, sum: +, toOriginal: Pixel.init(summableD:))
    }
}
% end
%
% for i, type in enumerate(types):

extension Image where Pixel == ${type} { // Interpolation, Transformation
    public subscript(x: Float, y: Float) -> ${type} {
        return self._interpolate(x: x, y: y, toSummable: { $0.summableF }, product: Pixel.productF, sum: +, toOriginal: Pixel.init(summableF:))
    }

    public func transformed(width: Int, height: Int, transform: (Float, Float) -> (Float, Float)) -> Image<${type}> {
        return self._transformed(width: width, height: height, toSummable: { $0.summableF }, product: Pixel.productF, sum: +, toOriginal: Pixel.init(summableF:), transform: transform)
    }
}
% end
%
% types = ['Int', 'Int8', 'Int16', 'Int32', 'Int64', 'UInt', 'UInt8', 'UInt16', 'UInt32', 'UInt64', 'Float', 'Double', 'Bool']
% arithmetic_operators = ['+', '-', '*', '/']
% float_operators = arithmetic_operators
% int_operators = arithmetic_operators + ['%', '&', '|', '^']
% bool_operators = ['&&', '||']
% float_operators = float_operators + [o + '=' for o in float_operators]
% int_operators = int_operators + ['&' + o for o in arithmetic_operators if o != '/'] + [o + '=' for o in  int_operators]
% type_to_operators = { type: int_operators if 'Int' in type else (bool_operators if type == 'Bool' else float_operators) for type in types }
% for channel, type in [(t, f'RGBA<{t}>') for t in types] + [(t, t) for t in types]:

extension Image where Pixel == ${type} {
%   for i, operator in enumerate(type_to_operators[channel]):
%     if i > 0:

%     end
%     if operator.endswith('='):
    public static func ${operator}(lhs: inout Image<${type}>, rhs: Image<${type}>) {
        for i in lhs.pixels.indices {
            lhs.pixels[i] ${operator} rhs.pixels[i]
        }
%     else:
    public static func ${operator}(lhs: Image<${type}>, rhs: Image<${type}>) -> Image<${type}> {
        precondition(lhs.width == rhs.width && lhs.height == rhs.height, "`${operator} cannot be applied for images with different sizes: (\(lhs.width), \(lhs.height)), (\(rhs.width), \(rhs.height))")
        let pixels = zip(lhs, rhs).map { $0 ${operator} $1 }
        return Image<${type}>(width: lhs.width, height: lhs.height, pixels: pixels)
%     end
    }
%   end
}
% end
